name: Public Release - Linux

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      runner:
        description: 'Runner type'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - ubuntu-latest
          - ubuntu-latest-large

jobs:

  Linux:
    environment: Release
    name: Rocky Linux 8

    strategy:
      matrix:
        defines:
          - ""
#          - "DESKTOP_APP_DISABLE_X11_INTEGRATION"
        experimental: [false]

    runs-on: ${{ github.event.inputs.runner}}
    continue-on-error: ${{ matrix.experimental }}

    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      IMAGE_TAG: tdesktop:centos_env

    steps:
      - name: Clone.
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: First set up.
        run: |
          sudo apt update
          curl -sSL https://install.python-poetry.org | python3 -
          cd Telegram/build/docker/centos_env
          poetry install
          DOCKERFILE=$(DEBUG= LTO=1 poetry run gen_dockerfile)
          echo "$DOCKERFILE" > Dockerfile

      - name: Free up some disk space.
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: true

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Libraries cache.
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.OS }}-libs-${{ hashFiles('Telegram/build/docker/centos_env/**') }}
          restore-keys: ${{ runner.OS }}-libs-

      - name: Libraries.
        uses: docker/build-push-action@v6
        with:
          context: Telegram/build/docker/centos_env
          load: ${{ env.ONLY_CACHE == 'false' }}
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max

      - name: Move cache.
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache{-new,}

      - name: Telegram Desktop build.
        env:
          RSA_PRIVATE: ${{ secrets.RSA_PRIVATE }}
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
        run: |
          mkdir DesktopPrivate

          docker run --rm \
          -u $(id -u) \
          -v $PWD:/usr/src/tdesktop \
          -v $PWD/DesktopPrivate:/usr/src/DesktopPrivate \
          -e CONFIG=Release \
          -e RSA_PRIVATE="${{ secrets.RSA_PRIVATE }}" \
          -e API_ID=${{ secrets.API_ID }} \
          -e API_HASH=${{ secrets.API_HASH }} \
          -w /usr/src/tdesktop/Telegram/build \
          tdesktop:centos_env \
          python3 release_build.py linux

      - name: Check.
        run: |
          filePath="out/Release/deploy"
          if test -d "$filePath"; then
            echo "Build successfully done! :)"

            size=$(stat -c %s "$filePath/Telegram/Telegram")
            echo "File size of ${filePath}: ${size} Bytes."
          else
            echo "Build error, output file does not exist."
            exit 1
          fi

      - name: Move artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          cd out/Release/deploy
          mkdir ../artifact
          mv -t ../artifact tlinux*
          mv -t ../artifact tsetup*

      - uses: actions/upload-artifact@v4
        name: Upload artifact.
        if: (env.UPLOAD_ARTIFACT == 'true')
        with:
          name: build_gh
          path: out/Release/artifact/tsetup*

      - uses: actions/upload-artifact@v4
        name: Upload artifact for TG.
        if: (env.UPLOAD_ARTIFACT == 'true')
        with:
          name: build_tg
          path: out/Release/artifact/tlinux*

      - uses: actions/upload-artifact@v4
        name: Upload symbols artifact.
        if: (env.UPLOAD_ARTIFACT == 'true')
        with:
          name: symbols
          path: out/Dropbox/Telegram/symbols/Telegram/*
